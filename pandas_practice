#!/usr/bin/env python
# coding: utf-8

# ___
# 
# <a href='http://www.pieriandata.com'> <img src='../../Pierian_Data_Logo.png' /></a>
# ___

# # SF Salaries Exercise 
# 
# Welcome to a quick exercise for you to practice your pandas skills! We will be using the [SF Salaries Dataset](https://www.kaggle.com/kaggle/sf-salaries) from Kaggle! Just follow along and complete the tasks outlined in bold below. The tasks will get harder and harder as you go along.

# ** Import pandas as pd.**

# In[1]:


import pandas as pd


# ** Read Salaries.csv as a dataframe called sal.**

# In[2]:


sal = pd.read_csv('Salaries.csv')


# ** Check the head of the DataFrame. **

# In[3]:


sal.head()


# In[4]:


sal.info()


# ** Use the .info() method to find out how many entries there are.**

# In[9]:





# **What is the average BasePay ?**

# In[9]:


sal['BasePay'].mean()


# In[10]:





# ** What is the highest amount of OvertimePay in the dataset ? **

# In[10]:


sal['OvertimePay'].max()


# In[11]:





# ** What is the job title of  JOSEPH DRISCOLL ? Note: Use all caps, otherwise you may get an answer that doesn't match up (there is also a lowercase Joseph Driscoll). **

# In[17]:


sal[sal['EmployeeName'] == 'JOSEPH DRISCOLL']['JobTitle']


# In[12]:





# ** How much does JOSEPH DRISCOLL make (including benefits)? **

# In[23]:


sal[sal['EmployeeName'] == 'JOSEPH DRISCOLL']['TotalPayBenefits']


# In[13]:





# ** What is the name of highest paid person (including benefits)?**

# In[27]:


sal.sort_values(by='TotalPayBenefits',ascending=False).head(1)['EmployeeName']


# In[14]:





# ** What is the name of lowest paid person (including benefits)? Do you notice something strange about how much he or she is paid?**

# In[28]:


sal.sort_values(by='TotalPayBenefits',ascending=True).head(1)


# In[15]:





# ** What was the average (mean) BasePay of all employees per year? (2011-2014) ? **

# In[42]:


sal.groupby('Year')['BasePay'].mean()


# In[16]:





# ** How many unique job titles are there? **

# In[43]:


sal['JobTitle'].nunique()


# In[17]:





# ** What are the top 5 most common jobs? **

# In[49]:


sal['JobTitle'].value_counts().head()


# In[18]:





# ** How many Job Titles were represented by only one person in 2013? (e.g. Job Titles with only one occurence in 2013?) **

# In[63]:


sal[(sal['JobTitle'].value_counts()==1) & (sal['Year']==2013)]


# In[75]:


df1=sal[sal['Year']==2013]


# In[78]:


df2=sal[sal['Year']==2013]['JobTitle'].value_counts() == 1


# In[87]:


sum(df2)


# In[19]:





# ** How many people have the word Chief in their job title? (This is pretty tricky) **

# In[94]:


def countc(word):
    if 'chief' in word.lower():
        return True
    else:
        return False 


# In[96]:


sum(sal['JobTitle'].apply(lambda word:countc(word)))


# In[97]:


sum(sal['JobTitle'].str.contains('Chief') | sal['JobTitle'].str.contains('chief'))


# In[98]:


def chief_string(title):
    if 'chief' in title.lower():
        return True
    else:
        return False


# In[100]:


sum(sal['JobTitle'].apply(lambda x: chief_string(x)))


# In[21]:





# ** Bonus: Is there a correlation between length of the Job Title string and Salary? **

# In[103]:


sal['title_len']=sal['JobTitle'].apply(len)


# In[104]:


sal[['title_len','TotalPayBenefits']].corr()


# # Great Job!
